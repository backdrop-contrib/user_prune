<?php

/**
 * @file
 * Module API The main module file. Implementing forms and functions.
 */

/**
 * Implements hook_config_info().
 */
function user_prune_config_info() {
  $prefixes['user_prune.settings'] = array(
    'label' => t('User Prune settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function user_prune_menu() {
  $items = array();

  $items['admin/config/people/user-prune'] = array(
    'title' => 'User Prune settings',
    'description' => 'Set criteria to remove inactive users in batches',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('user_prune_form'),
    'access arguments' => array('administer account settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function user_prune_form($form, &$form_state) {
  $config = config('user_prune.settings');
  $form['#config'] = 'user_prune.settings';

  // Use saved values if not on preview
  // and the values from last form if on preview.
  $preview = state_get('user_prune_preview_form_values', array());
  if (empty($preview)) {
    $values['user_status'] = $config->get('user_status');
    $values['cron_checkbox'] = $config->get('cron_checkbox');
    $values['user_roles_checkbox'] = $config->get('user_roles_checkbox');
    $values['no_comment'] = $config->get('no_comment');
    $values['no_node'] = $config->get('no_node');
    $values['no_subscriptions'] = $config->get('no_subscriptions');
    $values['no_og'] = $config->get('no_og');
    $values['no_webform'] = $config->get('no_webform');
    $values['no_tmgmt'] = $config->get('no_tmgmt');
    $values['prune_per_run'] = $config->get('prune_per_run');
    $values['time'] = $config->get('time');
    $values['never_logged_in'] = $config->get('never_logged_in');
    $values['cancel_method'] = $config->get('cancel_method');
  }
  else {
    $values = $preview;
  }
  state_del('user_prune_preview_form_values');

  // Preview table data variables are set when preview called
  // and deleted after table rendered.
  $form['preview_table'] = array(
    '#prefix' => '<div id="user_prune_preview">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => state_get('user_prune_preview_header', array()),
    '#rows' => state_get('user_prune_preview_rows', array()),
  );

  // Deleting the table data.
  // It is set on preview but not needed on other form calls.
  state_del('user_prune_preview_header');
  state_del('user_prune_preview_rows');

  $time_options = array(
    0          => t('Immediately'), // @todo is this true?
    900      => t('15 min'),
    1800     => t('30 min'),
    3600     => t('1 hour'),
    21600     => t('6 hours'),
    43200     => t('12 hours'),
    86400    => t('1 day'),
    432000   => t('5 days'),
    1296000  => t('15 days'),
    2629743   => t('1 month'),
    7889229   => t('3 months'),
    15778458  => t('6 months'),
    31556926   => t('1 year'),
    157784630  => t('5 years'),
  );

  $number_type_options = array(
    10  => t('10'),
    25  => t('25'),
    50  => t('50'),
    75  => t('75'),
    100 => t('100'),
    200 => t('200'),
    500 => t('500'),
  );

  // Time limit restrictions.
  $form['select_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('User selection criteria'),
  );
  $form['select_options']['help'] = array(
    '#type' => 'help',
    '#markup' => t('Delete inactive users in batches based on criteria. Pruning can take place on a scheduled cron job, or executed a single time.'),
  );
  $form['select_options']['not_logged_in_for_more_then_message'] = array(
    '#type' => 'item',
    '#title' => t("Limit to users who have not logged in within"),
  );
  $form['select_options']['time'] = array(
    '#type' => 'select',
    '#options' => $time_options,
    '#default_value' => $values['time'],
  );

  // User status exceptions.
  // @todo simplify: would anyone ever choose active and not blocked?
  $form['select_options']['user_status'] = array(
    '#type' => 'radios',
    '#title' => t('User status'),
    '#default_value' => $values['user_status'],
    '#options' => array(
      'all' => t('All users'),
      'blocked' => t('Just the blocked users'),
      'active' => t('Just the active users'),
    ),
  );

  // User never logged in.
  $form['select_options']['never_logged_in_label'] = array(
    '#markup' => "<label for='additonal-status'>" . t('Never logged in users') ."</label>",
  );
  $form['select_options']['never_logged_in'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete only users who never logged in.'),
    '#default_value' => $values['never_logged_in'],
  );

  // Show all the roles except superuser and anon roles.
  $roles = user_roles(TRUE, NULL);
  $administrator_role = config_get('system.core', 'user_admin_role');
  $administrator_name = $roles[$administrator_role];
  unset($roles[$administrator_role]);
  unset($roles[BACKDROP_AUTHENTICATED_ROLE]);
  $form['select_options']['user_roles_checkbox'] = array(
    '#type'          => 'checkboxes',
    '#title'         => 'Do not delete users with these roles',
    '#description'   => t('Users with these roles will not be deleted. Note that %anonymous users and users with the %administrator role will never be deleted.', array('%anonymous' => config_get('system.core', 'anonymous'), '%administrator' => $administrator_name)),
    '#options'       => $roles,
    '#default_value' => $values['user_roles_checkbox'],
  );

  // Existing content settings.
  $form['select_options']['content_display_label'] = array(
    '#markup' => "<label for='additonal-settings'>" . t('Already existing user content') ."</label>",
  );
  $form['select_options']['no_comment'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not delete users who have commented.'),
    '#default_value' => $values['no_comment'],
  );
  $form['select_options']['no_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not delete users who have authored content.'),
    '#default_value' => $values['no_node'],
  );
  // Add subscription option if module exists.
  if (module_exists('subscriptions')) {
    $form['select_options']['no_subscriptions'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not delete users who have subscriptions (Notifications module).'),
      '#default_value' => $values['no_subscriptions'],
    );
  }
  // Add groups option if module exists.
  if (module_exists('og')) {
    $form['select_options']['no_og'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not delete users who are a part of an Organic Group (OG).'),
      '#default_value' => $values['no_og'],
    );
  }
  // Add webform option if module exists.
  // @todo switch to it being webform
  if (module_exists('webform')) {
    $form['select_options']['no_webform'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not delete users who have submitted a Webform.'),
      '#default_value' => $values['no_webform'],
    );
  }
  // Add tmgmt option if module exists.
  if (module_exists('tmgmt')) {
    $form['select_options']['no_tmgmt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not delete users who have submited a translation job request (TMGMT).'),
      '#default_value' => $values['no_tmgmt'],
    );
  }

    // User cancel method.
  $form['select_options']['cancel_method'] = array(
    '#type' => 'radios',
    '#title' => t('User delete method'),
    '#default_value' => $values['cancel_method'],
    '#options' => array(
      'user_cancel_reassign' => t('Delete the account and make its content belong to the %anonymous user.', array('%anonymous' => config_get('system.core', 'anonymous'))),
      'user_cancel_delete' => t('Delete the account and its content.'),
    ),
  );

  // Preview filtered set of users.
  $form['select_options']['preview'] = array(
    '#type' => 'submit',
    '#value' => t('Preview'),
    '#submit' => array('user_prune_preview'),
  );

  $form['cron'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cron'),
  );
  $form['cron']['cron_checkbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prune selected users on every cron run.'),
    '#default_value' => $values['cron_checkbox'],
  );
  // Cron settings.
  $form['cron']['prune_per_run'] = array(
    '#title' => t('Select the number of users to delete on each cron run'),
    '#type' => 'select',
    '#default_value' => $values['prune_per_run'],
    '#options' => $number_type_options,
  );

  // Prune users right now.
  $form['prune_now'] = array(
    '#type' => 'fieldset',
    '#title' => t('Prune Now'),
    '#description' => t('You can use the criteria set above to prune users immediately. Any changes you made to the form will not be saved.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['prune_now']['go'] = array(
    '#type' => 'submit',
    '#value' => t('Prune Now'),
    '#submit' => array('user_prune_form_submit'),
  );

  return system_settings_form($form);
}

/**
 * Deleting the users who matching criteria.
 *
 * @param array $values
 *   Configuration values used to build out the delete query.
 * @param bool $cron
 *   If it is false it will provide page success/failure feedback.
 */
function user_prune_delete($values, $cron = FALSE) {
  // Fetch the SQL.
  $sql = user_prune_build_sql($values);

  // Build UID list.
  $result = db_query($sql);
  $uids = array();
  foreach ($result as $row) {
    $uids[] = $row->uid;
  }

  // Check to make sure the number of uids are in the per-run limit
  // and if not force it to be.
  if (count($uids) > $values['prune_per_run']) {
    $leftover = count($uids) - $values['prune_per_run'];
    $chunks = array_chunk($uids, $values['prune_per_run']);
    $uids = $chunks[0];
  }

  // Delete user one by one with the Backdrop user cancel method.
  foreach ($uids as $uid) {
    // Get the actual user cancel method.
    $method = $values['cancel_method'];

    // Get the user mail status canceled notify.
    $notify = config_get('system.core', 'user_mail_status_canceled_notify');
    $edit = array('user_cancel_notify' => $notify);

    // Delete account.
    user_cancel($edit, $uid, $method);
    $batch =& batch_get();
    $batch['progressive'] = FALSE;
    batch_process();
  }

  if (!$cron) {
    // If cron didn't kick this off add status message to the page.
    $message = t('@count users have been pruned.', array('@count' => count($uids)));
    if (isset($leftover)) {
      $message .= ' ' . t("@leftover users met your criteria but weren't deleted.", array('@leftover' => $leftover));
    }

    backdrop_set_message($message);
  }

}

/**
 * Collecting information for preview table.
 */
function user_prune_preview($form, &$form_state) {
  $values = $form_state['values'];

  // Fetch the SQL.
  $sql = user_prune_build_sql($values);

  $result = db_query($sql);
  $rows = array();
  foreach ($result as $row) {
    if ($row->Lastaccess == 0) {
      $rowlastaccess = 'Never';
    }
    else {
      $rowlastaccess = format_date($row->Lastaccess, 'short');
    }
    if ($row->Lastlogin == 0) {
      $rowlastlogin = 'Never';
    }
    else {
      $rowlastlogin = format_date($row->Lastlogin, 'short');
    }
    if ($row->Status == 1) {
      $rowstatus = 'Active';
    }
    else {
      $rowstatus = 'Blocked';
    }
    $rows[] = array(
      $row->uid,
      $row->Name,
      format_date($row->Created, 'short'),
      $rowlastaccess,
      $rowlastlogin,
      $rowstatus,
    );
  }

  state_set('user_prune_preview_header', array(
    'User ID',
    'Name',
    'Created',
    'Last access',
    'Last login',
    'Status',
  ));
  state_set('user_prune_preview_rows', $rows);

  state_set('user_prune_preview_form_values', $values);
}

/**
 * Builds the sql based on the form value settings provided.
 *
 * @param $values
 *   Form field values that will determine if anything is going to be left out.
 *
 * @return string
 *   The SQL string that will be used to query the database and find the users that need to be trimed.
 */
function user_prune_build_sql($values) {
  // Filter on user created time.
  $logged_in_limit = time() - $values['time'];
  $sql = 'SELECT u.uid AS uid, name AS Name, created AS Created, access AS Lastaccess, login AS Lastlogin, status AS Status FROM {users} u WHERE created < ' . $logged_in_limit;

  // Option to filter only never logged in users.
  if ($values['never_logged_in']) {
    $sql .= ' AND access = 0';
    $sql .= ' AND login  = 0';
  }
  else {
    $sql .= ' AND access < ' . $logged_in_limit;
    $sql .= ' AND login < ' . $logged_in_limit;
  }

  // Limit based on users active or blocked.
  switch ($values['user_status']) {
    case 'blocked':
      $sql .= ' AND status = 0';
      break;

    case 'active':
      $sql .= ' AND status = 1';
      break;
  }
  // Make sure not to include power users.
  $sql .= ' AND uid <> 0 AND uid <> 1';

  // Filter based on user roles.
  $selected_roles = array_filter($values['user_roles_checkbox']);
  foreach ($selected_roles as $role) {
    $sql .= ' AND u.uid NOT IN (SELECT r.uid FROM {users_roles} r WHERE role = \'' . $role . '\')';
  }

  // Filter on out users who have added a comment.
  if ($values['no_comment'] == 1) {
    $sql .= ' AND u.uid NOT IN (SELECT c.uid FROM {comment} c)';
  }

  // Filter out users who have created a node.
  if ($values['no_node'] == 1) {
    $sql .= ' AND u.uid NOT IN (SELECT d.uid FROM {node} d)';
  }

  // Add subscription query if module exists.
  if (module_exists('subscriptions')) {
    // Filter out users who have a subscription.
    if ($values['no_subscriptions'] == 1) {
      $sql .= ' AND u.uid NOT IN (SELECT s.recipient_uid FROM {subscriptions} s)';
    }
  }

  // Add groups query if module exists.
  if (module_exists('og')) {
    // Filter out users who have a og.
    if ($values['no_og'] == 1) {
      $sql .= ' AND u.uid NOT IN (SELECT ogm.etid FROM {og_membership} ogm)';
    }
  }

  // Add webform query if module exists.
  if (module_exists('webform')) {
    // Filter out users who have a webform.
    if ($values['no_webform'] == 1) {
      $sql .= ' AND u.uid NOT IN (SELECT wfs.uid FROM {webform_submissions} wfs)';
    }
  }

  // Add tmgmt query if module exists.
  if (module_exists('tmgmt')) {
    // Filter out users who have a tmgmt.
    if ($values['no_tmgmt'] == 1) {
      $sql .= ' AND u.uid NOT IN (SELECT tj.uid FROM {tmgmt_job} tj)';
    }
  }

  // Limit batches.
  $sql .= ' ORDER BY uid limit ' . $values['prune_per_run'];

  return $sql;
}

/**
 * Passing variables from form to user_prune_delete on one time prune.
 */
function user_prune_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Trim the selected users based on form data.
  user_prune_delete($values);
}

/**
 * Passing saved variables to user_prune_delete on cron run. Deleting users.
 */
function user_prune_cron() {
  $config = config('user_prune.settings');
  // Make sure the cron was turned on under settings.
  if ($config->get('cron_checkbox') == TRUE) {
    $cron_config = array();

    $cron_config['time'] = $config->get('time');
    $cron_config['never_logged_in'] = $config->get('never_logged_in');
    $cron_config['user_status'] = $config->get('user_status');
    $cron_config['prune_per_run'] = $config->get('prune_per_run');
    $cron_config['user_roles_checkbox'] = $config->get('user_roles_checkbox');
    $cron_config['no_comment'] = $config->get('no_comment');
    $cron_config['no_node'] = $config->get('no_node');
    $cron_config['no_subscriptions'] = $config->get('no_subscriptions');
    $cron_config['no_og'] = $config->get('no_og');
    $cron_config['no_webform'] = $config->get('no_webform');
    $cron_config['no_tmgmt'] = $config->get('no_tmgmt');
    $cron_config['cancel_method'] = $config->get('cancel_method');

    user_prune_delete($cron_config, TRUE);
  }
}
